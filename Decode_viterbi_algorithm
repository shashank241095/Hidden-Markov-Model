import sys
import os
import glob
import math
import collections
import itertools
import string
import codecs
from collections import OrderedDict

output_file = "hmmoutputlet.txt"
model_file = "hmmmodellet.txt"

fil = open(model_file, "r")

ftw = codecs.open(output_file, "w", encoding="UTF-8")

ep = dict()
tp = dict()
wt = dict()
ce = dict()
ct = dict()

line = fil.readlines()

ep = eval(line[0])

tp = eval(line[1])

wt = eval(line[2])

pathh = sys.argv[1]
f = codecs.open(pathh, mode="r", encoding="UTF-8").readlines()

for line in f:

    lin = line.strip().split(" ")

    start = '<start>'
    l = []
    l1 = []

    layer = 1
    index = 0
    tempd = {}
    temp = {}
    backpoint = {}
    backpointer1 = {}
    bp = {}

    for obs in lin:

        if (layer == 1):

            if obs in wt:

                for tags in wt[obs]:  # wt word and tags(number of tags and their count)  abc:{'S':2,'A':3},

                    t = (start, tags)

                    ptran = tp[t]

                    w = (obs, tags)

                    pemit = ep[w]

                    prob = math.log(float(pemit), 10) + math.log(float(ptran), 10)

                    l2 = (layer, tags)

                    temp[l2] = prob
                    backpointer1[(0, tags)] = (layer, start)


            else:

                for key in tp:
                    if key[0] == '<start>' and key[1] != '<start>':
                        temp[layer, key[1]] = math.log(tp[key])
                        backpointer1[(0, key[1])] = (layer, start)



        else:

            if obs in wt:
                temp2 = {}
                backpointer1 = {}

                for tags in wt[obs]:  # wt word and tags(number of tags and their count)  abc:{'S':2,'A':3},

                    m = -float("inf")

                    for previoustags in temp:

                        t = (previoustags[1], tags)

                        ptran = tp[t]

                        w = (obs, tags)

                        pemit = ep[w]

                        a = temp[previoustags]

                        prob = math.log(float(pemit), 10) + math.log(float(ptran), 10) + float(temp[previoustags])

                        if (m < prob):
                            m = prob
                            location = previoustags
                            locationtag = tags

                    backpointer1[location[0], tags] = (layer, location[1])

                    temp2[layer, tags] = m


            else:
                tempdict = {}
                temp2 = {}
                copydict2 = {}
                pt = {}
                for prevtag in temp:
                    for keys in tp:
                        if prevtag[1] == keys[0]:
                            val2 = math.log(float(tp[keys]), 10) + float(temp[prevtag])

                            if ((layer, keys[1]) in tempdict):
                                if tempdict[(layer, keys[1])] < val2:
                                    tempdict[(layer, keys[1])] = val2
                                    pt[prevtag[0], keys[1]] = (layer, keys[0])
                            else:

                                tempdict[layer, keys[1]] = val2
                                pt[prevtag[0], keys[1]] = (layer, keys[0])

                temp2 = tempdict
                backpointer1 = pt

        bp[index] = backpointer1
        backpointer1 = {}

        if (layer < 2):

            backpoint[index] = temp

        else:
            temp = temp2

            backpoint[index] = temp

        layer = layer + 1

        index = index + 1

    index_backpoint = len(backpoint) - 1

    lastdict = ()
    lastdict = backpoint[index_backpoint]

    max_key = max(lastdict, key=lambda k: lastdict[k])

    l.append(max_key[1])

    keyy = (max_key[0] - 1, max_key[1])
    q = keyy[1]
    for i in range(index_backpoint, 0, -1):
        keyy = (i, q)

        q = bp[i][keyy][1]
        l.append(q)

    l1 = l[::-1]

    i = 0
    for obs1 in lin:

        ftw.write(obs1 + "/" + l1[i], )
        if (i < len(l) - 1):
            ftw.write(" ")
        i = i + 1
    ftw.write("\n")

ftw.close()
